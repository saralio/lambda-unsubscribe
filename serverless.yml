service: lambda-unsubscribe
frameworkVersion: "3"

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
custom:
  pythonRequirements:
    slim: true
    dockerizePip: true
    useDownloadCache: false
    useStaticCache: false
    fileName: ./requirements/requirements-${env:BRANCH_NAME}.txt
  domain:
    test: test-remove-db.saral.club
    stg: stg-remove-db.saral.club
    prod: remove-db.saral.club
  customDomain:
    domainName: ${self:custom.domain.${env:MY_ENV}}
    certificateName: "*.saral.club"
    certificateArn: arn:aws:acm:us-east-1:240478177988:certificate/1821ffec-00e3-4d5c-9ec2-a7047e82f0a7
    stage: ${env:MY_ENV}
    createRoute53Record: true
    createRoute53IPv6Record: true
    endpointType: edge
    securityPolicy: tls_1_2
    apiType: rest
    autoDomain: true

package:
  individually: true
  patterns:
    - ".github/"
    - "__pycache__/**"
    - "rough.py"
    - "rendered.html"
    - "README.md"
    - "archive"
    - ".circleci"
    - "node_modules"

provider:
  name: aws
  runtime: python3.8
  stage: ${env:MY_ENV}
  region: ${env:MY_REGION}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
            - dynamodb:*
            - events:*
          Resource: "*"

functions:
  remove_user_frm_db:
    handler: handler.remove_user_frm_db
    maximumRetryAttempts: 1
    memorySize: 512
    environment:
      MY_ENV: ${env:MY_ENV}
      MY_REGION: ${env:MY_REGION}
    events:
      - http:
          cors: true
          path: /unsubscribe
          method: get
          request:
            parameters:
              querystrings:
                emailId: true
                suggestion: false
